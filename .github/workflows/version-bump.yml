# Copyright Â© 2025 Eser KUBALI <lxldev.contact@gmail.com>
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This file is part of vglog-filter and is licensed under
# the GNU General Public License v3.0 or later.
# See the LICENSE file in the project root for details.

name: Auto Version Bump with Semantic Release Notes

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - major
          - minor
          - patch
      release_notes:
        description: 'Custom release notes (optional)'
        required: false
        type: string
      prerelease:
        description: 'Mark as prerelease'
        required: false
        default: false
        type: boolean

  # Automatic trigger for significant changes
  push:
    branches: [main]
    paths-ignore:
      - VERSION
      - doc/VERSIONING.md
      - doc/TAG_MANAGEMENT.md
      - doc/RELEASE_WORKFLOW.md

# Concurrency guard to prevent multiple version bumps running simultaneously
concurrency:
  group: version-bump-${{ github.ref }}
  cancel-in-progress: true

jobs:
  version-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      NEW_VERSION: ''
    outputs:
      new_version: ${{ env.NEW_VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Determine version bump type
        id: version-analysis
        shell: bash
        run: |
          set -euo pipefail

          require_analyzer() {
            if [ ! -x ./dev-bin/semantic-version-analyzer ]; then
              echo "semantic-version-analyzer not found or not executable at ./dev-bin/semantic-version-analyzer" >&2
              exit 1
            fi
          }

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BUMP_TYPE="${{ github.event.inputs.bump_type }}"
            RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
            PRERELEASE="${{ github.event.inputs.prerelease }}"
            if [ "$BUMP_TYPE" = "auto" ]; then
              require_analyzer
              BUMP_TYPE="$(./dev-bin/semantic-version-analyzer --suggest-only 2>/dev/null || echo none)"
            fi
          else
            require_analyzer
            ANALYSIS="$(./dev-bin/semantic-version-analyzer --verbose 2>/dev/null || true)"

            if LAST_TAG="$(git describe --tags --abbrev=0 2>/dev/null)"; then
              BASE="$LAST_TAG"
              RANGE="${LAST_TAG}..HEAD"
            else
              ROOT="$(git rev-list --max-parents=0 HEAD)"
              RANGE="${ROOT}^..HEAD"   # include the first commit
            fi

            DIFF_SIZE="$(git diff --numstat $RANGE | awk '{ins+=$1; del+=$2} END{print (ins+0)+(del+0)}')"
            # TODO: Consider adding --json support to semantic-version-analyzer for more robust parsing
            NEW_SOURCE_FILES="$(echo "$ANALYSIS" | awk -F': ' '/New source files:/ {print $2+0}')"
            NEW_TEST_FILES="$(echo  "$ANALYSIS" | awk -F': ' '/New test files:/  {print $2+0}')"
            NEW_DOC_FILES="$(echo   "$ANALYSIS" | awk -F': ' '/New doc files:/   {print $2+0}')"
            DELETED_FILES="$(echo   "$ANALYSIS" | awk -F': ' '/Deleted files:/   {print $2+0}')"
            MODIFIED_FILES="$(echo  "$ANALYSIS" | awk -F': ' '/Modified files:/  {print $2+0}')"

            echo "Analysis:"
            echo "  base: ${BASE:-repo-root}"
            echo "  diff size: $DIFF_SIZE (ins+del)"
            echo "  new src: $NEW_SOURCE_FILES, new tests: $NEW_TEST_FILES, new docs: $NEW_DOC_FILES, deleted: $DELETED_FILES, modified: $MODIFIED_FILES"

            if [ "$DELETED_FILES" -gt 0 ]; then
              BUMP_TYPE="major"
            elif [ "$NEW_SOURCE_FILES" -gt 0 ] || [ "$NEW_TEST_FILES" -gt 0 ]; then
              if [ "$DIFF_SIZE" -ge 400 ]; then
                BUMP_TYPE="minor"
              else
                BUMP_TYPE="patch"
              fi
            elif [ "$MODIFIED_FILES" -gt 0 ] || [ "$DIFF_SIZE" -gt 0 ]; then
              BUMP_TYPE="patch"
            else
              echo "bump_type=none" >> "$GITHUB_OUTPUT"
              exit 0
            fi
            RELEASE_NOTES=''
            PRERELEASE='false'
          fi

          echo "bump_type=$BUMP_TYPE" >> "$GITHUB_OUTPUT"
          echo "release_notes=$RELEASE_NOTES" >> "$GITHUB_OUTPUT"
          echo "prerelease=$PRERELEASE" >> "$GITHUB_OUTPUT"

      - name: Summarize analysis
        if: steps.version-analysis.outputs.bump_type != 'none'
        run: |
          {
            echo "### Version analysis"
            echo "- Bump type: \`${{ steps.version-analysis.outputs.bump_type }}\`"
            echo "- New version (after bump): will compute in next step"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Bump version
        if: steps.version-analysis.outputs.bump_type != 'none'
        run: |
          set -euo pipefail
          echo "Bumping version type: ${{ steps.version-analysis.outputs.bump_type }}"
          
          # Fail early if bump-version is missing
          if [ ! -x ./dev-bin/bump-version ]; then
            echo "bump-version not found or not executable at ./dev-bin/bump-version" >&2
            exit 1
          fi
          
          echo "Current version: $(cat VERSION)"
          
          # Add [skip ci] to prevent triggering other workflows
          # TODO: Consider adding --json support to semantic-version-analyzer for more robust parsing
          ANALYSIS_MESSAGE="[skip ci] Auto version bump triggered by ${{ github.event_name }}" ./dev-bin/bump-version ${{ steps.version-analysis.outputs.bump_type }} --commit
          
          # Ensure [skip ci] is in the commit message
          if ! git log -1 --pretty=%B | grep -q '\[skip ci\]'; then
            git commit --amend -m "$(git log -1 --pretty=%B) [skip ci]"
          fi
          
          NEW_VERSION=$(cat VERSION)
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          git fetch --tags origin main
          git pull --rebase origin main
          git push origin main

      - name: Append new version to summary
        if: steps.version-analysis.outputs.bump_type != 'none'
        run: |
          echo "- New version: v${NEW_VERSION}" >> "$GITHUB_STEP_SUMMARY"

      - name: Create annotated tag
        if: steps.version-analysis.outputs.bump_type != 'none'
        run: |
          if git rev-parse "v${NEW_VERSION}" >/dev/null 2>&1; then
            echo "Tag v${NEW_VERSION} already exists; skipping tag creation."
          else
            git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
            git push origin "v${NEW_VERSION}"
          fi

      - name: Create Release
        if: steps.version-analysis.outputs.bump_type != 'none'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: Release v${{ env.NEW_VERSION }}
          generate_release_notes: true
          body: |
            ## Version Bump Type
            - **${{ steps.version-analysis.outputs.bump_type }}** version bump

            ## Release Notes
            ${{ steps.version-analysis.outputs.release_notes }}

            ## Auto-Release Information
            ${{ github.event_name == 'push' && 'This release was automatically triggered due to significant changes detected.' || 'This release was manually triggered.' }}

            ---
            *Release notes below are automatically generated by GitHub based on commits since last release.*
          draft: false
          prerelease: ${{ steps.version-analysis.outputs.prerelease == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
