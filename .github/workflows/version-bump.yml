# Copyright Â© 2025 Eser KUBALI <lxldev.contact@gmail.com>
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This file is part of vglog-filter and is licensed under
# the GNU General Public License v3.0 or later.
# See the LICENSE file in the project root for details.

name: Auto Version Bump with Semantic Release Notes

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - major
          - minor
          - patch
      release_notes:
        description: 'Custom release notes (optional)'
        required: false
        type: string
      prerelease:
        description: 'Mark as prerelease'
        required: false
        default: false
        type: boolean

  # Automatic trigger for significant changes on main
  push:
    branches: [ main ]
    paths-ignore:
      - VERSION
      - doc/VERSIONING.md
      - doc/TAG_MANAGEMENT.md
      - doc/RELEASE_WORKFLOW.md

# Concurrency guard to prevent multiple version bumps running simultaneously
concurrency:
  group: version-bump-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  version-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    env:
      NEW_VERSION: ""
      TARGET_BRANCH: "${{ github.ref_name }}"
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          set -euo pipefail
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Determine version bump type
        id: version-analysis
        run: |
          set -euo pipefail

          require_analyzer() {
            if [[ ! -x ./dev-bin/semantic-version-analyzer ]]; then
              echo "semantic-version-analyzer not found or not executable at ./dev-bin/semantic-version-analyzer" >&2
              exit 1
            fi
          }

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            BUMP_TYPE="${{ github.event.inputs.bump_type }}"
            RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
            PRERELEASE="${{ github.event.inputs.prerelease }}"
            if [[ "$BUMP_TYPE" == "auto" ]]; then
              require_analyzer
              BUMP_TYPE="$(./dev-bin/semantic-version-analyzer --suggest-only 2>/dev/null || echo none)"
            fi
          else
            require_analyzer

            # Establish a robust diff base and compute diff size
            if LAST_TAG="$(git describe --tags --abbrev=0 2>/dev/null)"; then
              BASE="$LAST_TAG"
              DIFF_SIZE="$(git diff --numstat "$LAST_TAG..HEAD" | awk '{ins+=$1; del+=$2} END{print (ins+0)+(del+0)}')"
            else
              EMPTY_TREE="$(git hash-object -t tree /dev/null)"
              BASE="repo-root"
              # Use two-arg form to avoid ambiguity with '..' and a tree-ish
              DIFF_SIZE="$(git diff --numstat "$EMPTY_TREE" HEAD | awk '{ins+=$1; del+=$2} END{print (ins+0)+(del+0)}')"
            fi

            ANALYSIS="$(./dev-bin/semantic-version-analyzer --verbose 2>/dev/null || true)"

            # Parse simple counters from analyzer output (falls back to 0 if not present)
            NEW_SOURCE_FILES="$(awk -F': ' '/New source files:/ {print $2+0}' <<<"$ANALYSIS")"
            NEW_TEST_FILES="$(awk  -F': ' '/New test files:/  {print $2+0}' <<<"$ANALYSIS")"
            NEW_DOC_FILES="$(awk   -F': ' '/New doc files:/   {print $2+0}' <<<"$ANALYSIS")"
            DELETED_FILES="$(awk   -F': ' '/Deleted files:/   {print $2+0}' <<<"$ANALYSIS")"
            MODIFIED_FILES="$(awk  -F': ' '/Modified files:/  {print $2+0}' <<<"$ANALYSIS")"

            echo "Analysis:"
            echo "  base: ${BASE}"
            echo "  diff size: ${DIFF_SIZE} (ins+del)"
            echo "  new src: ${NEW_SOURCE_FILES}, new tests: ${NEW_TEST_FILES}, new docs: ${NEW_DOC_FILES}, deleted: ${DELETED_FILES}, modified: ${MODIFIED_FILES}"

            if [[ "${DELETED_FILES}" -gt 0 ]]; then
              BUMP_TYPE="major"
            elif [[ "${NEW_SOURCE_FILES}" -gt 0 || "${NEW_TEST_FILES}" -gt 0 ]]; then
              if [[ "${DIFF_SIZE}" -ge 400 ]]; then
                BUMP_TYPE="minor"
              else
                BUMP_TYPE="patch"
              fi
            elif [[ "${MODIFIED_FILES}" -gt 0 || "${DIFF_SIZE}" -gt 0 ]]; then
              BUMP_TYPE="patch"
            else
              echo "bump_type=none" >> "$GITHUB_OUTPUT"
              echo "release_notes=" >> "$GITHUB_OUTPUT"
              echo "prerelease=false" >> "$GITHUB_OUTPUT"
              exit 0
            fi
            RELEASE_NOTES=""
            PRERELEASE="false"
          fi

          echo "bump_type=${BUMP_TYPE}" >> "$GITHUB_OUTPUT"
          echo "release_notes=${RELEASE_NOTES}" >> "$GITHUB_OUTPUT"
          echo "prerelease=${PRERELEASE}" >> "$GITHUB_OUTPUT"

      - name: Summarize analysis
        if: steps.version-analysis.outputs.bump_type != 'none'
        run: |
          {
            echo "### Version analysis"
            echo "- Bump type: \`${{ steps.version-analysis.outputs.bump_type }}\`"
            echo "- Target branch: \`${{ env.TARGET_BRANCH }}\`"
            echo "- New version (after bump): will be computed in the next step"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Bump version
        id: bump
        if: steps.version-analysis.outputs.bump_type != 'none'
        run: |
          set -euo pipefail
          echo "Bumping version type: ${{ steps.version-analysis.outputs.bump_type }}"

          # Ensure bump-version exists early
          if [[ ! -x ./dev-bin/bump-version ]]; then
            echo "bump-version not found or not executable at ./dev-bin/bump-version" >&2
            exit 1
          fi

          if [[ ! -f VERSION ]]; then
            echo "VERSION file not found at repository root." >&2
            exit 1
          fi

          echo "Current version: $(cat VERSION)"

          # Make sure we are up-to-date before bumping to reduce push races
          git fetch --prune --tags origin
          git pull --rebase origin "${TARGET_BRANCH}"

          # Add [skip ci] to prevent triggering other workflows
          ANALYSIS_MESSAGE="[skip ci] Auto version bump triggered by ${{ github.event_name }}" \
            ./dev-bin/bump-version "${{ steps.version-analysis.outputs.bump_type }}" --commit

          # Ensure [skip ci] present even if the script didn't include it
          if ! git log -1 --pretty=%B | grep -q '\[skip ci\]'; then
            git commit --amend -m "$(git log -1 --pretty=%B) [skip ci]"
          fi

          NEW_VERSION="$(cat VERSION)"
          echo "NEW_VERSION=${NEW_VERSION}" >> "$GITHUB_ENV"
          echo "new_version=${NEW_VERSION}" >> "$GITHUB_OUTPUT"

          # Push commit to the triggering branch
          git push origin HEAD:"${TARGET_BRANCH}"

      - name: Append new version to summary
        if: steps.version-analysis.outputs.bump_type != 'none'
        run: |
          echo "- New version: v${NEW_VERSION}" >> "$GITHUB_STEP_SUMMARY"

      - name: Create annotated tag
        if: steps.version-analysis.outputs.bump_type != 'none'
        run: |
          set -euo pipefail
          # Ensure we see the latest tags
          git fetch --prune --tags origin

          if git rev-parse --verify --quiet "refs/tags/v${NEW_VERSION}" >/dev/null; then
            echo "Tag v${NEW_VERSION} already exists; skipping tag creation."
          else
            git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
            git push origin "v${NEW_VERSION}"
          fi

      - name: Create Release
        if: steps.version-analysis.outputs.bump_type != 'none'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: Release v${{ env.NEW_VERSION }}
          generate_release_notes: true
          body: |
            ## Version Bump Type
            - **${{ steps.version-analysis.outputs.bump_type }}** version bump

            ## Release Notes
            ${{ steps.version-analysis.outputs.release_notes }}

            ## Auto-Release Information
            ${{ github.event_name == 'push' && 'This release was automatically triggered due to significant changes detected.' || 'This release was manually triggered.' }}

            ---
            *Release notes below are automatically generated by GitHub based on commits since last release.*
          draft: false
          prerelease: ${{ steps.version-analysis.outputs.prerelease == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
