# Copyright © 2025 Eser KUBALI <lxldev.contact@gmail.com>
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This file is part of vglog-filter and is licensed under
# the GNU General Public License v3.0 or later.
# See the LICENSE file in the project root for details.

name: Debug Build Testing

permissions:
  contents: read

on:
  push:
    paths:
      - 'src/**'
      - 'CMakeLists.txt'
      - 'build.sh'
      - '.github/workflows/debug-build-test.yml'
  pull_request:
    paths:
      - 'src/**'
      - 'CMakeLists.txt'
      - 'build.sh'
      - '.github/workflows/debug-build-test.yml'

jobs:
  debug-build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake g++ make gdb
      
      - name: Build debug version
        run: |
          ./build.sh debug clean
          echo "Debug build completed"
      
      - name: Verify debug build characteristics
        run: |
          echo "=== Debug Build Verification ==="
          
          # Check if binary contains debug symbols
          if file build/bin/vglog-filter | grep -q "not stripped"; then
            echo "✓ Debug symbols present"
          else
            echo "✗ Debug symbols missing"
            exit 1
          fi
          
          # Check binary size (should be larger due to debug info)
          BINARY_SIZE=$(stat -c%s build/bin/vglog-filter)
          echo "Binary size: $BINARY_SIZE bytes"
          
          # Verify debug information is present
          if readelf -S build/bin/vglog-filter | grep -q "\.debug"; then
            echo "✓ Debug sections present"
          else
            echo "✗ Debug sections missing"
            exit 1
          fi
      
      - name: Test debug functionality
        run: |
          echo "=== Testing Debug Build Functionality ==="
          
          # Test basic functionality
          ./build/bin/vglog-filter --help
          
          # Test with sample input that includes the debug marker
          cat > test_input.txt << 'EOF'
          ==12345== Memcheck, a memory error detector
          ==12345== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
          ==12345== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
          ==12345== Command: ./test_program
          ==12345== 
          ==12345== Successfully downloaded debug information for some_library.so
          ==12345== 
          ==12345== Invalid read of size 4
          ==12345==    at 0x4005A1: main (test.c:10)
          ==12345==    by 0x4005B2: some_function (test.c:15)
          ==12345==  Address 0x5204040 is 0 bytes after a block of size 40 alloc'd
          ==12345==    at 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
          ==12345==    by 0x4005C3: main (test.c:8)
          ==12345== 
          ==12345== HEAP SUMMARY:
          ==12345==     in use at exit: 40 bytes in 1 blocks
          ==12345==   total heap usage: 1 allocs, 0 frees, 40 bytes allocated
          ==12345== 
          ==12345== 40 bytes in 1 blocks are still reachable in loss record 1 of 1
          ==12345==    at 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
          ==12345==    by 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
          ==12345== 
          ==12345== LEAK SUMMARY:
          ==12345==    definitely lost: 0 bytes in 0 blocks
          ==12345==    indirectly lost: 0 bytes in 0 blocks
          ==12345==      possibly lost: 0 bytes in 0 blocks
          ==12345==    still reachable: 40 bytes in 1 blocks
          ==12345==         suppressed: 0 bytes in 0 blocks
          ==12345== 
          ==12345== For counts of detected and suppressed errors, rerun with: -v
          ==12345== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
          EOF
          
          ./build/bin/vglog-filter test_input.txt > output.txt
          
          # Verify output
          if [ -s output.txt ]; then
            echo "✓ Debug build processes input correctly"
            cat output.txt
          else
            echo "✗ Debug build failed to process input"
            exit 1
          fi
          
          # Test with -k flag to keep all debug info
          echo "Testing with -k flag..."
          ./build/bin/vglog-filter -k test_input.txt > output_keep.txt
          
          if [ -s output_keep.txt ]; then
            echo "✓ Debug build processes input with -k flag correctly"
            echo "Output with -k flag:"
            cat output_keep.txt
          else
            echo "✗ Debug build failed to process input with -k flag"
            exit 1
          fi
          
          # Test with input that doesn't have the marker (should produce no output by default)
          echo "Testing with input without debug marker..."
          cat > test_no_marker.txt << 'EOF'
          ==12345== Memcheck, a memory error detector
          ==12345== Invalid read of size 4
          ==12345==    at 0x4005A1: main (test.c:10)
          ==12345== HEAP SUMMARY:
          ==12345==     in use at exit: 40 bytes in 1 blocks
          EOF
          
          ./build/bin/vglog-filter test_no_marker.txt > output_no_marker.txt
          
          # This should produce no output because there's no marker
          if [ ! -s output_no_marker.txt ]; then
            echo "✓ Debug build correctly handles input without marker (no output)"
          else
            echo "✗ Debug build unexpectedly produced output for input without marker"
            cat output_no_marker.txt
            exit 1
          fi
          
          # Clean up
          rm -f test_input.txt output.txt output_keep.txt test_no_marker.txt output_no_marker.txt
      
      - name: Test with GDB (if available)
        run: |
          echo "=== GDB Debug Test ==="
          
          # Test that GDB can load the binary
          if command -v gdb >/dev/null 2>&1; then
            echo "Testing GDB integration..."
            gdb -batch -ex "file build/bin/vglog-filter" -ex "info functions" | head -20
            echo "✓ GDB can load debug symbols"
          else
            echo "GDB not available, skipping debugger test"
          fi
      
      - name: Debug build summary
        run: |
          echo "=== Debug Build Summary ==="
          echo "✓ Debug build completed successfully"
          echo "✓ Debug symbols verified"
          echo "✓ Functionality tested"
          echo "✓ Ready for debugging and development" 