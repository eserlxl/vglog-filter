# Copyright © 2025 Eser KUBALI <lxldev.contact@gmail.com>
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This file is part of vglog-filter and is licensed under
# the GNU General Public License v3.0 or later.
# See the LICENSE file in the project root for details.

name: Comprehensive Build Testing

permissions:
  contents: read
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'cmake/**'
      - 'CMakeLists.txt'
      - 'build.sh'
      - '.github/workflows/comprehensive-test.yml'
  pull_request:
    paths:
      - 'src/**'
      - 'tests/**'
      - 'cmake/**'
      - 'CMakeLists.txt'
      - 'build.sh'
      - '.github/workflows/comprehensive-test.yml'

defaults:
  run:
    shell: bash

jobs:
  comprehensive-test:
    name: Build / Test (${{ matrix.build_config.name }})
    runs-on: ubuntu-24.04
    timeout-minutes: 25

    strategy:
      fail-fast: false
      matrix:
        build_config:
          - name: "default"
            args: ""
          - name: "performance"
            args: "performance"
          - name: "debug"
            args: "debug"
          - name: "warnings"
            args: "warnings"
          - name: "performance-warnings-tests"
            args: "performance warnings tests"
          - name: "debug-warnings-tests"
            args: "debug warnings tests"

    env:
      BUILD_DIR: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup C++ Environment
        uses: ./.github/actions/setup-cpp

      - name: Build with ${{ matrix.build_config.name }} configuration
        run: |
          set -Eeuo pipefail
          echo "=== Building with configuration: ${{ matrix.build_config.name }} ==="
          echo "Arguments: '${{ matrix.build_config.args }}'"

          if [ -n "${{ matrix.build_config.args }}" ]; then
            ./build.sh ${{ matrix.build_config.args }} clean
          else
            ./build.sh clean
          fi

          echo "✓ Build completed for ${{ matrix.build_config.name }}"

      - name: Verify binary characteristics
        run: |
          set -Eeuo pipefail
          echo "=== Verifying ${{ matrix.build_config.name }} build ==="

          # Check binary exists
          if [ ! -f "${BUILD_DIR}/bin/vglog-filter" ]; then
            echo "✗ Binary not found at ${BUILD_DIR}/bin/vglog-filter"
            ls -la "${BUILD_DIR}/bin" || true
            exit 1
          fi

          # Check binary size
          BINARY_SIZE=$(stat -c%s "${BUILD_DIR}/bin/vglog-filter")
          echo "Binary size: ${BINARY_SIZE} bytes"

          # Debug vs stripped expectation
          if [[ "${{ matrix.build_config.name }}" == *"debug"* ]]; then
            if file "${BUILD_DIR}/bin/vglog-filter" | grep -q "not stripped"; then
              echo "✓ Debug symbols present (expected for debug build)"
            else
              echo "✗ Debug symbols missing (expected for debug build)"
              file "${BUILD_DIR}/bin/vglog-filter"
              exit 1
            fi
          else
            if file "${BUILD_DIR}/bin/vglog-filter" | grep -q "stripped"; then
              echo "✓ Binary stripped (expected for non-debug build)"
            else
              echo "⚠ Binary not stripped (may contain debug symbols)"
            fi
          fi

          # Check test executables if tests were built
          if [[ "${{ matrix.build_config.name }}" == *"tests"* ]]; then
            if [ -f "${BUILD_DIR}/bin/test_basic" ] && [ -f "${BUILD_DIR}/bin/test_integration" ]; then
              echo "✓ Test executables built"
            else
              echo "✗ Test executables missing"
              ls -la "${BUILD_DIR}/bin" || true
              exit 1
            fi
          fi

      - name: Test functionality
        run: |
          set -Eeuo pipefail
          echo "=== Testing ${{ matrix.build_config.name }} functionality ==="

          # --help should succeed
          "${BUILD_DIR}/bin/vglog-filter" --help >/dev/null

          # Basic pipeline test
          echo "==12345== Test input" | "${BUILD_DIR}/bin/vglog-filter" > /dev/null
          echo "✓ Basic functionality works"
          
          # Test -k flag functionality
          echo "==12345== Successfully downloaded debug" > test_k_flag.txt
          echo "==12345== Test input" >> test_k_flag.txt
          "${BUILD_DIR}/bin/vglog-filter" -k test_k_flag.txt > /dev/null
          echo "✓ -k flag functionality works"
          rm -f test_k_flag.txt

          # Run tests if they were built
          if [[ "${{ matrix.build_config.name }}" == *"tests"* ]]; then
            echo "Running test suite..."
            ./run_tests.sh --suite C++
          fi

      - name: Upload diagnostics on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics-${{ matrix.build_config.name }}
          if-no-files-found: ignore
          path: |
            ${{ env.BUILD_DIR }}/CMakeCache.txt
            ${{ env.BUILD_DIR }}/CMakeFiles/CMakeOutput.log
            ${{ env.BUILD_DIR }}/CMakeFiles/CMakeError.log
            ${{ env.BUILD_DIR }}/**/*.log