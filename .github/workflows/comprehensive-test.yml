# Copyright © 2025 Eser KUBALI <lxldev.contact@gmail.com>
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This file is part of vglog-filter and is licensed under
# the GNU General Public License v3.0 or later.
# See the LICENSE file in the project root for details.

name: Comprehensive Build Testing

permissions:
  contents: read
  actions: read

# Cancel older runs of the same ref to save CI minutes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'test/**'
      - 'include/**'
      - 'CMakeLists.txt'
      - 'build.sh'
      - '.github/workflows/comprehensive-test.yml'
  pull_request:
    paths:
      - 'src/**'
      - 'test/**'
      - 'include/**'
      - 'CMakeLists.txt'
      - 'build.sh'
      - '.github/workflows/comprehensive-test.yml'

defaults:
  run:
    shell: bash
    # Set fail-fast behavior for all steps
    command: |
      set -euo pipefail
      ${{ job.steps.step.outputs.command }}

jobs:
  comprehensive-test:
    name: Build / Test (${{ matrix.build_config.name }})
    runs-on: ubuntu-24.04
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        build_config:
          - name: "default"
            args: ""
            cache_key: "default"
          - name: "performance"
            args: "performance"
            cache_key: "perf"
          - name: "debug"
            args: "debug"
            cache_key: "debug"
          - name: "warnings"
            args: "warnings"
            cache_key: "warn"
          - name: "performance-warnings-tests"
            args: "performance warnings tests"
            cache_key: "perf-warn-test"
          - name: "debug-warnings-tests"
            args: "debug warnings tests"
            cache_key: "debug-warn-test"

    env:
      BUILD_DIR: build
      BINARY_PATH: build/bin/vglog-filter

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better caching

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            build/
            .ccache/
          key: ${{ runner.os }}-${{ matrix.build_config.cache_key }}-${{ hashFiles('CMakeLists.txt', 'build.sh', 'src/**', 'include/**') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.build_config.cache_key }}-

      - name: Setup C++ Environment
        uses: ./.github/actions/setup-cpp

      - name: Build with ${{ matrix.build_config.name }} configuration
        id: build
        run: |
          echo "=== Building with configuration: ${{ matrix.build_config.name }} ==="
          echo "Arguments: '${{ matrix.build_config.args }}'"

          # Ensure scripts are executable
          chmod +x ./build.sh
          chmod +x ./run_tests.sh

          if [ -n "${{ matrix.build_config.args }}" ]; then
            ./build.sh ${{ matrix.build_config.args }} clean
          else
            ./build.sh clean
          fi

          echo "✓ Build completed for ${{ matrix.build_config.name }}"

      - name: Verify binary characteristics
        run: |
          echo "=== Verifying ${{ matrix.build_config.name }} build ==="

          # Check binary exists and is executable
          if [ ! -f "${BINARY_PATH}" ] || [ ! -x "${BINARY_PATH}" ]; then
            echo "✗ Binary not found or not executable at ${BINARY_PATH}"
            ls -la "${BUILD_DIR}/bin" || true
            exit 1
          fi

          # Check binary size and characteristics
          echo "Binary size: $(stat -c%s "${BINARY_PATH}") bytes"
          echo "Binary type: $(file "${BINARY_PATH}")"
          
          # Verify binary can run and show version
          if ! "${BINARY_PATH}" --version > /dev/null 2>&1; then
            echo "✗ Binary failed to run --version"
            exit 1
          fi

          echo "✓ Binary verification passed"

      - name: Run smoke tests
        run: |
          echo "=== Running smoke tests ==="
          
          # Test basic functionality
          echo "test input" | "${BINARY_PATH}" > /dev/null || {
            echo "✗ Basic stdin processing failed"
            exit 1
          }
          
          # Test help output
          if ! "${BINARY_PATH}" --help | grep -q "Usage:"; then
            echo "✗ Help output not found"
            exit 1
          fi
          
          echo "✓ Smoke tests passed"

      - name: Run C++ unit tests
        if: contains(matrix.build_config.args, 'tests')
        run: |
          echo "=== Running C++ unit tests ==="
          ./run_tests.sh --suite C++
          echo "✓ C++ unit tests passed"

      - name: Run workflow tests
        if: contains(matrix.build_config.args, 'tests')
        run: |
          echo "=== Running workflow tests ==="
          ./run_tests.sh --suite Workflow
          echo "✓ Workflow tests passed"

      - name: Performance analysis (performance builds)
        if: contains(matrix.build_config.name, 'performance')
        run: |
          echo "=== Performance analysis ==="
          
          # Check for optimization flags
          if ! file "${BINARY_PATH}" | grep -q "not stripped"; then
            echo "✓ Binary appears to be optimized (stripped)"
          else
            echo "⚠ Binary may not be fully optimized"
          fi
          
          # Check binary size is reasonable
          BINARY_SIZE=$(stat -c%s "${BINARY_PATH}")
          if [ "$BINARY_SIZE" -gt 10485760 ]; then  # 10MB
            echo "⚠ Binary size is large: ${BINARY_SIZE} bytes"
          else
            echo "✓ Binary size is reasonable: ${BINARY_SIZE} bytes"
          fi

      - name: Debug analysis (debug builds)
        if: contains(matrix.build_config.name, 'debug')
        run: |
          echo "=== Debug analysis ==="
          
          # Check for debug symbols
          if file "${BINARY_PATH}" | grep -q "not stripped"; then
            echo "✓ Debug symbols present"
          else
            echo "⚠ Debug symbols not detected"
          fi
          
          # Check for sanitizer support
          if ldd "${BINARY_PATH}" | grep -q "libasan\|libubsan"; then
            echo "✓ Sanitizer libraries linked"
          else
            echo "ℹ No sanitizer libraries detected"
          fi

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vglog-filter-${{ matrix.build_config.name }}
          path: ${{ env.BINARY_PATH }}
          if-no-files-found: error
          retention-days: 7

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.build_config.name }}
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeError.log
          if-no-files-found: ignore
          retention-days: 3