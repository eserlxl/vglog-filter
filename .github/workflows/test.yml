# Copyright (C) 2025 Eser KUBALI <lxldev.contact@gmail.com>
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This file is part of vglog-filter and is licensed under
# the GNU General Public License v3.0 or later.
# See the LICENSE file in the project root for details.

name: Build and Test

permissions:
  contents: read

on:
  push:
    paths:
      - 'src/**'
      - 'CMakeLists.txt'
      - 'build.sh'
      - '.github/workflows/test.yml'
  pull_request:
    paths:
      - 'src/**'
      - 'CMakeLists.txt'
      - 'build.sh'
      - '.github/workflows/test.yml'

defaults:
  run:
    shell: bash

# Cancel older runs of the same ref to save CI minutes
concurrency:
  group: build-test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        build-type: [default, performance, debug, warnings]
    env:
      BINARY_PATH: build/bin/vglog-filter
      DEBIAN_FRONTEND: noninteractive

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential cmake g++ make binutils coreutils

      - name: Ensure build script is executable
        run: |
          set -euo pipefail
          chmod +x ./build.sh

      - name: Build vglog-filter (${{ matrix.build-type }} + clean)
        run: |
          set -euo pipefail
          case "${{ matrix.build-type }}" in
            default)
              ./build.sh clean
              ;;
            performance)
              ./build.sh performance clean
              ;;
            debug)
              ./build.sh debug clean
              ;;
            warnings)
              ./build.sh warnings clean
              ;;
            *)
              echo "Unknown build type: ${{ matrix.build-type }}" >&2
              exit 2
              ;;
          esac

      - name: Verify binary exists and is executable
        run: |
          set -euo pipefail
          ls -la "${BINARY_PATH}"
          file "${BINARY_PATH}"
          test -x "${BINARY_PATH}"

      - name: Test help output
        run: |
          set -euo pipefail
          "${BINARY_PATH}" --help || { echo "--help failed"; exit 1; }
          "${BINARY_PATH}" -h || { echo "-h failed"; exit 1; }

      - name: Test version/usage (non-fatal)
        run: |
          set -euo pipefail
          # Some invocations may exit non-zero when no args are provided; that's fine.
          timeout 5s "${BINARY_PATH}" || true
          # If a --version flag exists, log it but don't fail if missing.
          "${BINARY_PATH}" --version >/dev/null 2>&1 || true

      - name: Functional smoke test with sample input
        run: |
          set -euo pipefail
          cat > test_input.txt << 'EOF'
          ==12345== Memcheck, a memory error detector
          ==12345== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
          ==12345== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
          ==12345== Command: ./test_program
          ==12345==
          ==12345== Successfully downloaded debug
          ==12345== Invalid read of size 4
          ==12345==    at 0x4005A1: main (test.c:10)
          ==12345==  Address 0x5204040 is 0 bytes after a block of size 40 alloc'd
          ==12345==    at 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
          ==12345==    at 0x40058E: main (test.c:8)
          ==12345==
          ==12345== HEAP SUMMARY:
          ==12345==     in use at exit: 40 bytes in 1 blocks
          ==12345==   total heap usage: 1 allocs, 0 frees, 40 bytes allocated
          ==12345==
          ==12345== LEAK SUMMARY:
          ==12345==    definitely lost: 40 bytes in 1 blocks
          ==12345==    indirectly lost: 0 bytes in 0 blocks
          ==12345==      possibly lost: 0 bytes in 1 blocks
          ==12345==    still reachable: 0 bytes in 0 blocks
          ==12345==         suppressed: 0 bytes in 0 blocks
          ==12345== Rerun with --leak-check=full to see details of leaked memory
          ==12345==
          ==12345== For counts of detected and suppressed errors, rerun with: -v
          ==12345== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
          EOF

          # Basic filtering functionality (file input)
          "${BINARY_PATH}" test_input.txt > filtered_output.txt
          # Verify output was generated (non-empty)
          [ -s filtered_output.txt ] || { echo "No output generated"; exit 1; }

          # Also test stdin pipeline path
          cat test_input.txt | "${BINARY_PATH}" > /dev/null

          # Try a few flags (do not assert content here, just execution)
          "${BINARY_PATH}" -d 2 test_input.txt > filtered_depth2.txt
          "${BINARY_PATH}" -k test_input.txt > filtered_keep.txt
          "${BINARY_PATH}" -v test_input.txt > filtered_verbose.txt

          # Cleanup
          rm -f test_input.txt filtered_output.txt filtered_depth2.txt filtered_keep.txt filtered_verbose.txt

      - name: Inspect compilation characteristics (non-fatal)
        run: |
          set -euo pipefail
          if [ "${{ matrix.build-type }}" = "performance" ]; then
            echo "[info] Checking for basic text section presence (objdump)…"
            if objdump -h "${BINARY_PATH}" | grep -q '\.text'; then
              echo "[ok] .text section found (expected)."
            else
              echo "[warn] Could not verify .text section."
            fi
          elif [ "${{ matrix.build-type }}" = "debug" ]; then
            echo "[info] Checking for debug symbols (file)…"
            if file "${BINARY_PATH}" | grep -qi 'not stripped'; then
              echo "[ok] Debug build appears to include symbols."
            else
              echo "[warn] Debug symbols not detected (binary may be stripped)."
            fi
          else
            echo "[info] No special checks for build type '${{ matrix.build-type }}'."
          fi
          # Non-fatal by design

      - name: Upload binary artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vglog-filter-${{ matrix.build-type }}
          path: ${{ env.BINARY_PATH }}
          if-no-files-found: error
