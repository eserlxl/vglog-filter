# Versioning Configuration
# This file allows customization of bonus points, multipliers, and penalties
# without editing the bash script. Use yq or jq to read this file.

# Base deltas for different change types
# Use strings to preserve decimal values for future micro-bumps (e.g., "0.5")
base_deltas:
  patch: "1"
  minor: "5"
  major: "10"

# LOC cap and rollover configuration
# rollover must be > 1 (renamed from "radix" for clarity)
limits:
  loc_cap: 10000
  rollover: 100  # Two-digit rollover feels right for most projects

# Bonus system - 7 categories with point values
bonuses:
  # Breaking Changes (High Impact)
  breaking_changes:
    api_breaking: 3
    cli_breaking: 2
    removed_features: 2
    database_schema: 4
    config_format: 3
    plugin_api: 3
    deprecated_removal: 1
  
  # Security & Stability (Critical)
  security_stability:
    security_vuln: 5
    cve: 2
    memory_safety: 4
    race_condition: 3
    resource_leak: 2
    crash_fix: 3
    data_corruption: 4
  
  # Performance & Optimization
  # Note: Numeric thresholds are defined in patterns.performance section
  performance:
    perf_50_plus: 3
    perf_20_50: 2
    memory_reduction_pct: 2  # Bonus for meeting threshold (renamed from memory_reduction_threshold)
    build_time_pct: 1        # Bonus for meeting threshold (renamed from build_time_threshold)
    runtime_opt: 1
  
  # Feature Additions (Medium Impact)
  features:
    new_cli_command: 2
    new_config_option: 1
    new_file_format: 3
    new_api_endpoint: 2
    new_plugin_system: 4
    new_output_format: 2
    new_source_file: 1  # Bonus for new source files
  
  # Code Quality & Maintenance
  code_quality:
    major_refactor: 2
    coverage_10_plus: 1
    static_analysis: 2
    new_test_suite: 1
    doc_overhaul: 1
    code_style: 1
  
  # Infrastructure & Tooling
  infrastructure:
    cicd_changes: 1
    build_overhaul: 2
    major_deps: 1
    new_platform: 2
    containerization: 2
    cloud_integration: 3
  
  # User Experience
  user_experience:
    ui_ux_improvement: 2
    accessibility: 2
    i18n: 3
    error_messages: 1
    user_docs: 1

# Multiplier system for critical scenarios
# Use numbers not strings - yq outputs floats but Bash arithmetic with bc expects bare numerics
multipliers:
  # Critical Multipliers
  critical:
    zero_day: 2.0
    production_outage: 2.0
    compliance: 1.5
  
  # Scope Multipliers
  scope:
    customer_request: 1.2
    cross_platform: 1.3
    backward_compat: 1.2
    migration_tools: 1.1

# Penalty system for quality issues (additive, can result in negative bonus)
# Values must be negative (-n) to ensure penalties reduce the bonus
penalties:
  no_migration_path: -2
  incomplete_docs: -1
  missing_tests: -1
  perf_regression: -2

# Decision tree thresholds
# Add patch_bonus so the decision tree can be entirely data-driven
thresholds:
  major_bonus: 8
  minor_bonus: 4
  patch_bonus: 0  # Default threshold for PATCH classification

# LOC divisors for different change types
# Guard against accidental zero (division by zero crash in bc) by validating at load time
loc_divisors:
  major: 1000
  minor: 500
  patch: 250

# Pattern matching configuration
# Provides parameterised numeric thresholds for performance messages
# Consider making pattern keywords themselves configurable for team-specific wording conventions
patterns:
  # Performance patterns with numeric thresholds
  performance:
    memory_reduction_threshold: 30  # Percentage threshold for memory reduction
    build_time_threshold: 50        # Percentage threshold for build time improvement
    perf_50_threshold: 50           # Percentage threshold for 50%+ performance improvement
  
  # Early exit for performance optimization
  # Document in README: script should skip expensive LOC diff once bonus >= threshold
  early_exit:
    bonus_threshold: 8
    change_type: "major" 