#!/bin/bash

# Copyright (C) 2025 Eser KUBALI <lxldev.contact@gmail.com>
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This file is part of vglog-filter and is licensed under
# the GNU General Public License v3.0 or later.
# See the LICENSE file in the project root for details.

set -e

# Tag management script for vglog-filter
# Usage: ./tag-manager [list|cleanup|create] [options]

show_help() {
    cat << EOF
Tag Manager for vglog-filter

Usage: $0 [command] [options]

Commands:
  list                    List all tags (sorted by version)
  cleanup [count]         Delete old tags, keeping the specified number (default: 10)
  create [version]        Create a new tag for the specified version
  info [tag]              Show information about a specific tag

Examples:
  $0 list
  $0 cleanup 5
  $0 create 1.2.0
  $0 info v1.1.2

EOF
}

list_tags() {
    echo "=== All Tags (sorted by version) ==="
    git tag --sort=-version:refname | nl
    echo
    echo "Total tags: $(git tag | wc -l)"
}

cleanup_tags() {
    local keep_count=${1:-10}
    
    echo "=== Tag Cleanup ==="
    echo "Keeping the $keep_count most recent tags"
    
    # Get all tags sorted by version (newest first)
    local tags
    tags=$(git tag --sort=-version:refname)
    local total_tags
    total_tags=$(echo "$tags" | wc -l)
    
    if [ "$total_tags" -le "$keep_count" ]; then
        echo "No cleanup needed - only $total_tags tags exist"
        return 0
    fi
    
    # Get tags to delete
    local tags_to_delete
    tags_to_delete=$(echo "$tags" | tail -n +$((keep_count + 1)))
    local delete_count
    delete_count=$(echo "$tags_to_delete" | wc -l)
    
    echo "Tags to delete ($delete_count):"
    echo "$tags_to_delete"
    echo
    
    read -r -p "Are you sure you want to delete these tags? (y/N): " confirm
    if [[ $confirm =~ ^[Yy]$ ]]; then
        echo "Deleting tags..."
        echo "$tags_to_delete" | while read -r tag; do
            if [ -n "$tag" ]; then
                echo "Deleting tag: $tag"
                git tag -d "$tag"
                git push origin ":refs/tags/$tag"
            fi
        done
        echo "Tag cleanup completed"
    else
        echo "Tag cleanup cancelled"
    fi
}

create_tag() {
    local version=$1
    
    if [ -z "$version" ]; then
        echo "Error: Version required"
        echo "Usage: $0 create <version>"
        exit 1
    fi
    
    # Validate version format
    if ! [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo "Error: Invalid version format '$version'. Expected format: x.y.z"
        exit 1
    fi
    
    local tag_name="v$version"
    
    # Check if tag already exists
    if git tag | grep -q "^$tag_name$"; then
        echo "Error: Tag $tag_name already exists"
        exit 1
    fi
    
    echo "Creating tag: $tag_name"
    git tag "$tag_name"
    echo "Tag created locally. Push with: git push origin $tag_name"
}

show_tag_info() {
    local tag=$1
    
    if [ -z "$tag" ]; then
        echo "Error: Tag name required"
        echo "Usage: $0 info <tag>"
        exit 1
    fi
    
    if ! git tag | grep -q "^$tag$"; then
        echo "Error: Tag $tag does not exist"
        exit 1
    fi
    
    echo "=== Tag Information: $tag ==="
    echo "Commit: $(git rev-parse "$tag")"
    echo "Date: $(git log -1 --format=%cd "$tag")"
    echo "Author: $(git log -1 --format=%an "$tag")"
    echo "Message: $(git log -1 --format=%s "$tag")"
    echo
    echo "Changes since previous tag:"
    local prev_tag
    prev_tag=$(git tag --sort=-version:refname | grep -A1 "^$tag$" | tail -1)
    if [ -n "$prev_tag" ]; then
        git log --oneline "$prev_tag".."$tag"
    else
        echo "No previous tag found"
    fi
}

# Main script logic
case "${1:-help}" in
    list)
        list_tags
        ;;
    cleanup)
        cleanup_tags "$2"
        ;;
    create)
        create_tag "$2"
        ;;
    info)
        show_tag_info "$2"
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo "Error: Unknown command '$1'"
        show_help
        exit 1
        ;;
esac 