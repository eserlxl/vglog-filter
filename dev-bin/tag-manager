#!/bin/bash
# Copyright © 2025 Eser KUBALI <lxldev.contact@gmail.com>
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This file is part of vglog-filter and is licensed under
# the GNU General Public License v3.0 or later.
# See the LICENSE file in the project root for details.
#
# Tag management script for vglog-filter
# Usage: ./dev-bin/tag-manager [list|cleanup|create|info] [options]

set -euo pipefail
set -E
IFS=$'\n\t'

# Fail loudly with context on unexpected errors
trap 'echo "Error: line $LINENO: $BASH_COMMAND" >&2' ERR

# Require Bash >= 4 (mapfile, [[ ]], arrays, etc.)
if ((BASH_VERSINFO[0] < 4)); then
  echo "Bash ≥ 4 required" >&2
  exit 1
fi

# Make parsing/sorting deterministic
export LC_ALL=C

PROG=${0##*/}

# -----------------------
# Configurables (env overrides)
# -----------------------
REMOTE="${REMOTE:-origin}"
# Which tags are considered "release tags" for cleanup/info sequencing
TAG_GLOB="${TAG_GLOB:-v[0-9]*.[0-9]*.[0-9]*}"
# Create signed tags if set to 1 (requires GPG and configured signing key)
TAG_SIGN="${TAG_SIGN:-0}"
# If set to 1, skip interactive confirmations (useful in CI)
ASSUME_YES="${ASSUME_YES:-0}"
# If set to 1, push the tag to REMOTE after creation
PUSH_AFTER_CREATE="${PUSH_AFTER_CREATE:-0}"
# If set to 1, allow tagging even when the working directory/index is dirty
ALLOW_DIRTY_TAG="${ALLOW_DIRTY_TAG:-0}"
# If set to 1, print actions but do not execute them (cleanup only)
DRY_RUN="${DRY_RUN:-0}"
# Cleanup scope toggles (mutually exclusive if both set)
LOCAL_ONLY="${LOCAL_ONLY:-0}"
REMOTE_ONLY="${REMOTE_ONLY:-0}"
# Optional protection: space-separated list of glob patterns that must never be deleted in cleanup (e.g., "v1.*.* v2.0.*")
PROTECT_GLOB="${PROTECT_GLOB:-}"
# If set to 1, show only first-parent history in `info`
FIRST_PARENT="${FIRST_PARENT:-0}"
# If set to 1, fetch tags from REMOTE before cleanup (keeps view in sync)
FETCH_BEFORE_CLEANUP="${FETCH_BEFORE_CLEANUP:-1}"
# If set to 1, never delete tags that point at HEAD (safety)
PROTECT_CURRENT="${PROTECT_CURRENT:-1}"
# Tag message prefix (useful in monorepos)
TAG_MSG_PREFIX="${TAG_MSG_PREFIX:-vglog-filter}"

# -----------------------
# Helpers
# -----------------------
die() { printf '%s\n' "$*" >&2; exit 1; }

is_tty() { [[ -t 0 && -t 1 ]]; }

confirm() {
    local prompt="${1:-Proceed?}"
    if [[ "$ASSUME_YES" == "1" ]]; then
        return 0
    fi
    if ! is_tty; then
        echo "Non-interactive session; confirmation required. Set ASSUME_YES=1 to proceed automatically." >&2
        return 1
    fi
    read -r -p "$prompt (y/N): " reply
    [[ "$reply" =~ ^[Yy]$ ]]
}

ensure_cmd() {
    command -v "$1" >/dev/null 2>&1 || die "Required command '$1' not found in PATH."
}

ensure_git_repo() {
    git rev-parse --is-inside-work-tree >/dev/null 2>&1 || die "Not inside a git repository."
}

ensure_remote_exists() {
    git remote get-url "$REMOTE" >/dev/null 2>&1 || die "Remote '$REMOTE' not found."
}

print_effective_settings() {
    cat <<EOS
Current effective settings:
  REMOTE=$REMOTE
  TAG_GLOB=$TAG_GLOB
  TAG_SIGN=$TAG_SIGN
  ASSUME_YES=$ASSUME_YES
  PUSH_AFTER_CREATE=$PUSH_AFTER_CREATE
  ALLOW_DIRTY_TAG=$ALLOW_DIRTY_TAG
  DRY_RUN=$DRY_RUN
  LOCAL_ONLY=$LOCAL_ONLY
  REMOTE_ONLY=$REMOTE_ONLY
  PROTECT_GLOB=${PROTECT_GLOB:-"(none)"}
  FIRST_PARENT=$FIRST_PARENT
  FETCH_BEFORE_CLEANUP=$FETCH_BEFORE_CLEANUP
  PROTECT_CURRENT=$PROTECT_CURRENT
  TAG_MSG_PREFIX=$TAG_MSG_PREFIX
EOS
}

# -----------------------
# UI
# -----------------------
show_help() {
    cat << EOF
Tag Manager for vglog-filter

Usage: $PROG [command] [options]

Commands:
  list                        List all tags (sorted by version)
  cleanup [count]             Delete old release tags matching ${TAG_GLOB}, keeping 'count' (default: 10)
  create <version> [commit]   Create a new tag v<version> at [commit] (default: HEAD), e.g. 1.2.0
  info <tag>                  Show information about a specific tag

Environment variables:
  REMOTE               Remote name to push deletions/creations to (default: origin)
  TAG_GLOB             Glob pattern of release tags (default: ${TAG_GLOB})
  TAG_SIGN             If set to 1, create a signed tag (requires GPG). Default: 0 (annotated)
  ASSUME_YES           If set to 1, skip confirmations (non-interactive). Default: 0
  PUSH_AFTER_CREATE    If set to 1, automatically push the newly created tag. Default: 0
  ALLOW_DIRTY_TAG      If set to 1, allow creating a tag with a dirty tree. Default: 0
  DRY_RUN              If set to 1, print actions without executing (cleanup only). Default: 0
  LOCAL_ONLY           If set to 1, cleanup deletes only local tags. Default: 0
  REMOTE_ONLY          If set to 1, cleanup deletes only remote tags. Default: 0
  PROTECT_GLOB         Space-separated glob patterns never to delete in cleanup (e.g., "v1.*.* v2.0.*")
  FIRST_PARENT         If set to 1, show first-parent history in 'info'. Default: 0
  FETCH_BEFORE_CLEANUP If set to 1, git fetch --tags before cleanup when remote deletions are enabled. Default: 1
  PROTECT_CURRENT      If set to 1, never delete tags pointing at HEAD in cleanup. Default: 1
  TAG_MSG_PREFIX       Message prefix for tag annotation/signature. Default: "vglog-filter"

Examples:
  $PROG list
  $PROG cleanup 5
  $PROG create 1.2.0
  $PROG create 1.2.1 3f2c1d2
  $PROG info v1.1.2

EOF
    print_effective_settings
}

# -----------------------
# Commands
# -----------------------
list_tags() {
    ensure_git_repo
    echo "=== All Tags (sorted by version) ==="
    if ! git tag | grep -q .; then
        echo "(no tags)"
        echo "Total tags: 0"
        return 0
    fi
    git tag --sort=-version:refname | nl -ba
    echo
    local count
    count=$(git tag -l | sed -n '$=' || true)
    printf "Total tags: %s\n" "${count:-0}"
}

cleanup_tags() {
    ensure_git_repo

    local keep_count="${1:-10}"

    if ! [[ "$keep_count" =~ ^[0-9]+$ ]]; then
        die "Error: keep count must be a non-negative integer."
    fi

    if [[ "$REMOTE_ONLY" == "1" && "$LOCAL_ONLY" == "1" ]]; then
        die "REMOTE_ONLY and LOCAL_ONLY are mutually exclusive."
    fi

    local do_local=1 do_remote=1
    [[ "$REMOTE_ONLY" == "1" ]] && do_local=0
    [[ "$LOCAL_ONLY" == "1"  ]] && do_remote=0
    if (( do_remote )); then
        ensure_remote_exists
        if [[ "$FETCH_BEFORE_CLEANUP" == "1" && "$DRY_RUN" != "1" ]]; then
            echo "Fetching tags from ${REMOTE}..."
            git fetch --tags --prune "${REMOTE}"
        fi
    fi

    echo "=== Tag Cleanup ==="
    echo "Pattern: ${TAG_GLOB}"
    [[ -n "$PROTECT_GLOB" ]] && echo "Protected patterns: ${PROTECT_GLOB}"
    echo "Keeping the ${keep_count} most recent release tags"
    echo "Local deletions: $([[ $do_local -eq 1 ]] && echo enabled || echo disabled)"
    echo "Remote deletions on ${REMOTE}: $([[ $do_remote -eq 1 ]] && echo enabled || echo disabled)"
    echo "DRY_RUN: $([[ $DRY_RUN == 1 ]] && echo yes || echo no)"

    # Gather only release tags matching TAG_GLOB, newest first
    mapfile -t tags < <(git tag -l "${TAG_GLOB}" --sort=-version:refname)

    local total_tags="${#tags[@]}"
    printf "Found %d release tags.\n" "$total_tags"

    if (( total_tags <= keep_count )); then
        echo "No cleanup needed."
        return 0
    fi

    # Determine which tags to delete (everything after the first 'keep_count')
    local -a tags_to_delete=("${tags[@]:$keep_count}")

    # Build protection set
    local -a protected_patterns=()
    if [[ -n "$PROTECT_GLOB" ]]; then
        # shellcheck disable=SC2206
        protected_patterns=($PROTECT_GLOB)  # intentional word-splitting on space-separated globs
    fi
    if [[ "$PROTECT_CURRENT" == "1" ]]; then
        while IFS= read -r t; do
            [[ -n "$t" ]] && protected_patterns+=("$t")
        done < <(git tag --points-at HEAD || true)
    fi

    # Apply protection filters
    if (( ${#protected_patterns[@]} > 0 )); then
        local -a filtered=()
        local tag pat protect
        for tag in "${tags_to_delete[@]}"; do
            protect=0
            for pat in "${protected_patterns[@]}"; do
                if [[ "$tag" == "$pat" ]]; then
                    protect=1
                    break
                fi
            done
            (( protect == 0 )) && filtered+=("$tag")
        done
        tags_to_delete=("${filtered[@]}")
    fi

    if (( ${#tags_to_delete[@]} == 0 )); then
        echo "After applying protection filters, nothing to delete."
        return 0
    fi

    echo "Tags to delete (${#tags_to_delete[@]}):"
    printf '%s\n' "${tags_to_delete[@]}"
    echo

    local scope_msg
    if   (( do_local )) && (( do_remote )); then scope_msg="locally and on '${REMOTE}'"
    elif (( do_local )); then scope_msg="locally"
    else scope_msg="on '${REMOTE}'"
    fi

    if confirm "Are you sure you want to delete these tags ${scope_msg}?"; then
        echo "Deleting tags..."
        local tag
        for tag in "${tags_to_delete[@]}"; do
            [[ -n "$tag" ]] || continue
            if (( do_local )); then
                echo "Deleting local tag: $tag"
                [[ "$DRY_RUN" == "1" ]] || git tag -d -- "$tag" >/dev/null
            fi
            if (( do_remote )); then
                echo "Deleting remote tag on ${REMOTE}: $tag"
                if [[ "$DRY_RUN" != "1" ]]; then
                    # Prefer the modern form (works since Git 1.7.0)
                    git push --delete "${REMOTE}" "${tag}" || git push "${REMOTE}" ":refs/tags/${tag}"
                fi
            fi
        done
        echo "Tag cleanup completed."
    else
        echo "Tag cleanup cancelled."
    fi
}

create_tag() {
    ensure_git_repo

    local version="${1:-}"
    local commitish="${2:-HEAD}"

    if [[ -z "$version" ]]; then
        die "Error: Version required
Usage: $PROG create <version> [commit]"
    fi

    # Strict x.y.z
    if ! [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        die "Error: Invalid version format '$version'. Expected: x.y.z"
    fi

    # Resolve and validate commit-ish
    local commit
    if ! commit=$(git rev-parse --verify --quiet "${commitish}^{commit}"); then
        die "Error: Commit '${commitish}' is not a valid commit."
    fi

    local tag_name="v${version}"

    if git tag -l -- "${tag_name}" | grep -qx -- "${tag_name}"; then
        die "Error: Tag ${tag_name} already exists"
    fi

    # Signed tag prerequisites
    if [[ "$TAG_SIGN" == "1" ]]; then
        ensure_cmd gpg
        if ! git config --get user.signingkey >/dev/null; then
            die "TAG_SIGN=1 but git user.signingkey is not configured."
        fi
    fi

    # Warn if tree/index is dirty (includes untracked)
    if [[ "$ALLOW_DIRTY_TAG" != "1" && "$commit" == "$(git rev-parse HEAD)" ]]; then
        if [[ -n "$(git status --porcelain=v1 --untracked-files=normal 2>/dev/null)" ]]; then
            echo "Warning: You have uncommitted and/or untracked changes."
            confirm "Continue creating tag ${tag_name} at ${commit:0:7} anyway?" || die "Aborted."
        fi
    fi

    local msg="${TAG_MSG_PREFIX} ${tag_name}"
    echo "Creating tag: ${tag_name} at ${commit}"

    if [[ "$TAG_SIGN" == "1" ]]; then
        git tag -s -m "$msg" -- "$tag_name" "$commit"
    else
        git tag -a -m "$msg" -- "$tag_name" "$commit"
    fi

    echo "Tag created locally."

    if [[ "$PUSH_AFTER_CREATE" == "1" ]]; then
        ensure_remote_exists
        echo "Pushing tag to ${REMOTE}..."
        git push "${REMOTE}" "${tag_name}"
        echo "Tag pushed."
    else
        echo "Push with:"
        echo "  git push ${REMOTE} ${tag_name}"
    fi
}

# Return previous tag (older) relative to the given tag, based on version sort.
prev_tag_for() {
    local target="$1"
    git tag -l "${TAG_GLOB}" --sort=-version:refname \
    | awk -v t="$target" '
        $0==t {getline; if ($0!="") print $0; exit}
    '
}

show_tag_info() {
    ensure_git_repo

    local tag="${1:-}"

    if [[ -z "$tag" ]]; then
        die "Error: Tag name required
Usage: $PROG info <tag>"
    fi

    if ! git tag -l -- "${tag}" | grep -qx -- "${tag}"; then
        die "Error: Tag ${tag} does not exist"
    fi

    local commit
    if ! commit=$(git rev-parse --verify "${tag}^{commit}" 2>/dev/null); then
        die "Error: Could not resolve ${tag} to a commit"
    fi

    echo "=== Tag Information: ${tag} ==="

    # Tag metadata (if annotated)
    local tag_type
    tag_type=$(git cat-file -t "$tag" 2>/dev/null || true)
    if [[ "$tag_type" == "tag" ]]; then
        # Annotated tag
        local tagger_line
        tagger_line=$(git for-each-ref --format='%(taggername) <%(taggeremail)> | %(taggerdate:iso8601)' "refs/tags/$tag" || true)
        local tag_subject
        tag_subject=$(git for-each-ref --format='%(contents:subject)' "refs/tags/$tag" || true)
        echo "Tag type: annotated"
        [[ -n "$tagger_line" ]] && echo "Tagger: ${tagger_line}"
        [[ -n "$tag_subject" ]] && echo "Tag message: ${tag_subject}"
    else
        echo "Tag type: lightweight"
    fi

    echo "Commit: ${commit}"
    echo "Date:   $(git --no-pager log -1 --format=%cd --date=iso-strict "${commit}")"
    echo "Author: $(git --no-pager log -1 --format='%an <%ae>' "${commit}")"
    echo "Subject: $(git --no-pager log -1 --format=%s "${commit}")"
    echo

    echo "Changes since previous release tag (${TAG_GLOB}):"
    local prev_tag
    prev_tag="$(prev_tag_for "${tag}")"
    if [[ -n "${prev_tag}" ]]; then
        echo "(prev: ${prev_tag})"
        # Build log options
        local -a LOG_OPTS=(--oneline --no-decorate)
        [[ "$FIRST_PARENT" == "1" ]] && LOG_OPTS+=(--first-parent)
        git --no-pager log "${LOG_OPTS[@]}" "${prev_tag}..${tag}"
        echo
        local -a count_opts=()
        [[ "$FIRST_PARENT" == "1" ]] && count_opts+=(--first-parent)
        echo "Commit count: $(git rev-list --count "${count_opts[@]}" "${prev_tag}..${tag}")"
        echo "Diffstat:"
        git --no-pager diff --stat "${prev_tag}..${tag}" || true
    else
        echo "No previous tag found (this might be the oldest matching release tag)."
    fi
}

# -----------------------
# Entry point
# -----------------------
ensure_cmd git
ensure_cmd awk

case "${1:-help}" in
    list)
        list_tags
        ;;
    cleanup)
        cleanup_tags "${2:-10}"
        ;;
    create)
        create_tag "${2:-}" "${3:-HEAD}"
        ;;
    info)
        show_tag_info "${2:-}"
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo "Error: Unknown command '${1:-}'" >&2
        echo
        show_help
        exit 1
        ;;
esac
