#!/bin/bash
# Copyright © 2025 Eser KUBALI <lxldev.contact@gmail.com>
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This file is part of vglog-filter and is licensed under
# the GNU General Public License v3.0 or later.
# See the LICENSE file in the project root for details.
#
# cursor-version-bump: Interactive wrapper for bump-version
# ------------------------------------------------------------
# Purpose:
# - Provide a friendly interactive menu for Cursor IDE users.
# - Delegate all real work to the existing bump-version script.
#
# Behavior:
# - If arguments are given, forward them verbatim to bump-version.
# - If no arguments are given, show a menu and build a simple command,
#   optionally appending extra args you type (e.g., --sign --push).
#
# It does NOT validate or reinterpret flags; bump-version stays the single
# source of truth for versioning logic and options.

set -euo pipefail
IFS=$'\n\t'
export LC_ALL=C

# --------------- appearance ---------------
is_tty=0
[[ -t 1 ]] && is_tty=1

if (( is_tty )); then
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    CYAN='\033[0;36m'
    RED='\033[0;31m'
    BOLD='\033[1m'
    RESET='\033[0m'
else
    GREEN=''; YELLOW=''; CYAN=''; RED=''; BOLD=''; RESET=''
fi

info()  { echo -e "${GREEN}[*]${RESET} $*"; }
warn()  { echo -e "${YELLOW}[!]${RESET} $*"; }
error() { echo -e "${RED}[x]${RESET} $*" >&2; }
die()   { error "$@"; exit 1; }

# --------------- locate bump-version ---------------
# You can override with BUMP_VERSION_BIN=/custom/path/bump-version
BUMP_VERSION_BIN="${BUMP_VERSION_BIN:-}"

resolve_bump_bin() {
    if [[ -n "${BUMP_VERSION_BIN}" && -x "${BUMP_VERSION_BIN}" ]]; then
        echo "${BUMP_VERSION_BIN}"
        return
    fi
    if [[ -x "./dev-bin/bump-version" ]]; then
        echo "./dev-bin/bump-version"
        return
    fi
    if command -v bump-version >/dev/null 2>&1; then
        command -v bump-version
        return
    fi
    die "Could not find 'bump-version'. Set BUMP_VERSION_BIN or place it at ./dev-bin/bump-version (or in PATH)."
}

print_help() {
    cat <<'EOF'
cursor-version-bump — interactive wrapper for bump-version

Usage:
  cursor-version-bump                # interactive menu
  cursor-version-bump -- ...         # forward everything after -- to bump-version
  cursor-version-bump [args...]      # forward args verbatim to bump-version

Notes:
- This wrapper does not reinterpret flags. Whatever you pass goes to bump-version.
- Interactive mode builds a simple command (major|minor|patch|auto|set X.Y.Z),
  then optionally appends any extra text you type (e.g., "--sign --push").
- If you already have Cursor tasks that can call bump-version directly,
  you may not need this wrapper at all.

Env:
  BUMP_VERSION_BIN=/path/to/bump-version  # optional override

EOF
}

confirm() {
    local prompt="${1:-Proceed?} [y/N] "
    local ans=""
    read -r -p "$(echo -e "${YELLOW}${prompt}${RESET}")" ans || true
    [[ "$ans" == [yY] || "$ans" == [yY][eE][sS] ]]
}

# Get script directory and project root
SCRIPT_DIR="$(dirname "$(realpath "$0")")"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
VERSION_FILE="$PROJECT_ROOT/VERSION"

# Check if VERSION file exists
if [[ ! -f "$VERSION_FILE" ]]; then
    die "VERSION file not found"
fi

# Read current version
CURRENT_VERSION=$(tr -d '[:space:]' < "$VERSION_FILE")

interactive_menu() {
    echo -e "${CYAN}vglog-filter Version Bump Helper${RESET}"
    echo -e "${CYAN}Current version: ${GREEN}$CURRENT_VERSION${RESET}"
    echo ""
    
    # Show options
    echo "Select version bump type:"
    echo "1) Patch (bug fixes) - $CURRENT_VERSION → $(echo "$CURRENT_VERSION" | awk -F. '{print $1"."$2"."$3+1}')"
    echo "2) Minor (new features) - $CURRENT_VERSION → $(echo "$CURRENT_VERSION" | awk -F. '{print $1"."$2+1".0"}')"
    echo "3) Major (breaking changes) - $CURRENT_VERSION → $(echo "$CURRENT_VERSION" | awk -F. '{print $1+1".0.0"}')"
    echo "4) Auto (let bump-version decide)"
    echo "5) Set exact version (X.Y.Z)"
    echo "6) Cancel"
    echo ""
    
    # Read user choice
    read -r -p "Enter choice (1-6): " choice || true
    
    local base_cmd=()
    case $choice in
        1)
            echo -e "${YELLOW}Bumping patch version...${RESET}"
            base_cmd=(patch)
            ;;
        2)
            echo -e "${YELLOW}Bumping minor version...${RESET}"
            base_cmd=(minor)
            ;;
        3)
            echo -e "${YELLOW}Bumping major version...${RESET}"
            base_cmd=(major)
            ;;
        4)
            echo -e "${YELLOW}Using auto detection...${RESET}"
            base_cmd=(auto)
            ;;
        5)
            read -r -p "Enter version (X.Y.Z): " v || true
            [[ -n "$v" ]] || die "Empty version."
            base_cmd=(set "$v")
            ;;
        6)
            warn "Cancelled."
            exit 0
            ;;
        *)
            die "Invalid choice."
            ;;
    esac
    
    echo ""
    echo "Optionally type extra args for bump-version (or press Enter):"
    echo "  e.g., --commit --tag --sign --push   (or any flags your bump-version supports)"
    read -r -p "Extra args: " extra || true
    
    # Build final argv: base_cmd + extra (word-split intentionally)
    local final_cmd=( "${base_cmd[@]}" )
    if [[ -n "$extra" ]]; then
        # Intentional word splitting for user-provided extra flags:
        # shellcheck disable=SC2086
        # shellcheck disable=SC2206 # intentional word splitting for user args
        final_cmd=( "${final_cmd[@]}" $extra )
    fi
    
    echo ""
    echo -e "Will run: ${BOLD}bump-version ${final_cmd[*]}${RESET}"
    if confirm "Run now?"; then
        # Exec bump-version with the composed arguments
        local bin; bin="$(resolve_bump_bin)"
        # shellcheck disable=SC2068 # we do want word splitting for user-provided args
        # shellcheck disable=SC2206 # intentional word splitting for user args
        exec "$bin" "${final_cmd[@]}"
    else
        warn "Cancelled."
        exit 0
    fi
}

main() {
    # Help shortcut
    if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
        print_help; exit 0
    fi
    
    local bin; bin="$(resolve_bump_bin)"
    
    # If arguments are provided:
    # - If the first arg is "--", drop it and forward the rest verbatim.
    # - Otherwise, forward all args verbatim (no changes).
    if [[ "$#" -gt 0 ]]; then
        if [[ "${1:-}" == "--" ]]; then
            shift || true
        fi
        # Forward everything to bump-version unchanged.
        # shellcheck disable=SC2068 # pass-through intended
        exec "$bin" $@
    fi
    
    # No args => interactive
    interactive_menu
}

main "$@"
