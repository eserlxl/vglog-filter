#!/bin/bash
# Copyright © 2025 Eser KUBALI <lxldev.contact@gmail.com>
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This file is part of vglog-filter and is licensed under
# the GNU General Public License v3.0 or later.
# See the LICENSE file in the project root for details.
#
# Semantic Version Analyzer v3 for vglog-filter
# Simple, reliable version bumping based on actual code changes

set -e

show_help() {
    cat << EOF
Semantic Version Analyzer v3 for vglog-filter

Usage: $0 [options]

Options:
  --since <tag>     Analyze changes since specific tag (default: last tag)
  --since-commit <hash>  Analyze changes since specific commit
  --since-date <date>    Analyze changes since specific date (YYYY-MM-DD)
  --verbose         Show detailed analysis
  --suggest-only    Only show suggestion, don't analyze
  --help            Show this help

Examples:
  $0 --since v1.1.0
  $0 --since-date 2025-01-01
  $0 --verbose

EOF
}

# Default values
SINCE_TAG=""
SINCE_COMMIT=""
SINCE_DATE=""
VERBOSE=false
SUGGEST_ONLY=false

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --since)
            SINCE_TAG="$2"
            shift 2
            ;;
        --since-commit)
            SINCE_COMMIT="$2"
            shift 2
            ;;
        --since-date)
            SINCE_DATE="$2"
            shift 2
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --suggest-only)
            SUGGEST_ONLY=true
            shift
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Determine the base for comparison
get_base_reference() {
    if [ -n "$SINCE_COMMIT" ]; then
        echo "$SINCE_COMMIT"
    elif [ -n "$SINCE_TAG" ]; then
        echo "$SINCE_TAG"
    elif [ -n "$SINCE_DATE" ]; then
        # Find the latest commit before the specified date
        git rev-list -1 --before="$SINCE_DATE 23:59:59" HEAD
    else
        # Default to last tag
        local last_tag
        last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$last_tag" ]; then
            echo "$last_tag"
        else
            # If no tags exist, use the first commit
            git rev-list --max-parents=0 HEAD
        fi
    fi
}

# Simple analysis based on file changes and diff size
analyze_changes() {
    local base_ref="$1"
    local changes
    changes=$(git diff --name-status "$base_ref"..HEAD)
    
    local added_files=0
    local modified_files=0
    local deleted_files=0
    local new_source_files=0
    local new_test_files=0
    local new_doc_files=0
    
    # Process each change
    while IFS=$'\t' read -r status file; do
        case "$status" in
            A)
                ((added_files++))
                if [[ "$file" =~ \.(cpp|cxx|cc)$ ]] || [[ "$file" =~ ^src/ ]]; then
                    ((new_source_files++))
                elif [[ "$file" =~ ^test/ ]]; then
                    ((new_test_files++))
                elif [[ "$file" =~ ^doc/ ]]; then
                    ((new_doc_files++))
                fi
                ;;
            M)
                ((modified_files++))
                ;;
            D)
                ((deleted_files++))
                ;;
        esac
    done <<< "$changes"
    
    # Get diff size
    local diff_size
    diff_size=$(git diff --stat "$base_ref" 2>/dev/null | tail -1 | awk '{print $4}' | sed 's/,//' | sed 's/insertions//' | sed 's/insertion//' | tr -d '()' || echo "0")
    
    echo "added_files=$added_files"
    echo "modified_files=$modified_files"
    echo "deleted_files=$deleted_files"
    echo "new_source_files=$new_source_files"
    echo "new_test_files=$new_test_files"
    echo "new_doc_files=$new_doc_files"
    echo "diff_size=$diff_size"
}

# Determine version bump suggestion based on simple rules
suggest_version_bump() {
    local added_files="$1"
    local modified_files="$2"
    local deleted_files="$3"
    local new_source_files="$4"
    local new_test_files="$5"
    local new_doc_files="$6"
    local diff_size="$7"
    
    # Extremely conservative thresholds - only bump for significant changes
    if [ "${deleted_files:-0}" -gt 0 ] && [ "${diff_size:-0}" -gt 1000 ]; then
        echo "major"
    elif [ "${new_source_files:-0}" -gt 2 ] && [ "${diff_size:-0}" -gt 1000 ]; then
        echo "minor"
    elif [ "${new_test_files:-0}" -gt 3 ] && [ "${diff_size:-0}" -gt 800 ]; then
        echo "minor"
    elif [ "${new_doc_files:-0}" -gt 2 ] && [ "${diff_size:-0}" -gt 600 ]; then
        echo "minor"
    elif [ "${modified_files:-0}" -gt 10 ] && [ "${diff_size:-0}" -gt 500 ]; then
        echo "patch"
    else
        echo "none"
    fi
}

# Main analysis
main() {
    local base_ref
    base_ref=$(get_base_reference)
    
    if [ "$SUGGEST_ONLY" = "true" ]; then
        echo "Suggested version bump: none"
        exit 0
    fi
    
    echo "=== Semantic Version Analysis v3 ==="
    echo "Analyzing changes since: $base_ref"
    echo
    
    # Get current version
    local current_version
    current_version=$(cat VERSION 2>/dev/null || echo "0.0.0")
    echo "Current version: $current_version"
    echo
    
    # Analyze changes
    local analysis
    analysis=$(analyze_changes "$base_ref")
    local added_files
    added_files=$(echo "$analysis" | grep "added_files=" | cut -d'=' -f2)
    local modified_files
    modified_files=$(echo "$analysis" | grep "modified_files=" | cut -d'=' -f2)
    local deleted_files
    deleted_files=$(echo "$analysis" | grep "deleted_files=" | cut -d'=' -f2)
    local new_source_files
    new_source_files=$(echo "$analysis" | grep "new_source_files=" | cut -d'=' -f2)
    local new_test_files
    new_test_files=$(echo "$analysis" | grep "new_test_files=" | cut -d'=' -f2)
    local new_doc_files
    new_doc_files=$(echo "$analysis" | grep "new_doc_files=" | cut -d'=' -f2)
    local diff_size
    diff_size=$(echo "$analysis" | grep "diff_size=" | cut -d'=' -f2)
    
    # Show detailed analysis if verbose
    if [ "$VERBOSE" = "true" ]; then
        echo "=== Detailed Analysis ==="
        echo "File changes:"
        echo "  Added files: $added_files"
        echo "  Modified files: $modified_files"
        echo "  Deleted files: $deleted_files"
        echo
        echo "New content:"
        echo "  New source files: $new_source_files"
        echo "  New test files: $new_test_files"
        echo "  New doc files: $new_doc_files"
        echo
        echo "Change magnitude:"
        echo "  Diff size: $diff_size lines"
        echo
        echo "Thresholds for auto-release (extremely conservative):"
        echo "  Major: Deleted files + diff > 1000 lines"
        echo "  Minor: New source files (>2) + diff > 1000 lines"
        echo "  Minor: New test files (>3) + diff > 800 lines"
        echo "  Minor: New doc files (>2) + diff > 600 lines"
        echo "  Patch: Modified files (>10) + diff > 500 lines"
        echo
        
        # Show recent commits
        echo "Recent commits:"
        git log --oneline "$base_ref"..HEAD | head -10
        echo
    fi
    
    # Determine suggestion
    local suggestion
    suggestion=$(suggest_version_bump "$added_files" "$modified_files" "$deleted_files" "$new_source_files" "$new_test_files" "$new_doc_files" "$diff_size")
    
    echo "=== Version Bump Suggestion ==="
    case "$suggestion" in
        major)
            echo "Suggested bump: MAJOR version"
            echo "Reason: Significant deletions with large code changes"
            echo "Current: $current_version → New: $(./dev-bin/bump-version major --dry-run 2>/dev/null || echo "X.0.0")"
            ;;
        minor)
            echo "Suggested bump: MINOR version"
            echo "Reason: New source files, tests, or documentation with significant changes"
            echo "Current: $current_version → New: $(./dev-bin/bump-version minor --dry-run 2>/dev/null || echo "0.X.0")"
            ;;
        patch)
            echo "Suggested bump: PATCH version"
            echo "Reason: Significant modifications with large code changes"
            echo "Current: $current_version → New: $(./dev-bin/bump-version patch --dry-run 2>/dev/null || echo "0.0.X")"
            ;;
        none)
            echo "Suggested bump: NONE"
            echo "Reason: No significant changes detected"
            ;;
    esac
    
    echo
    echo "To apply this suggestion:"
    echo "  ./dev-bin/bump-version $suggestion --commit"
    echo
    echo "Or use GitHub Actions:"
    echo "  Go to Actions → Auto Version Bump → Run workflow → Choose: $suggestion"
}

# Run main function
main "$@" 